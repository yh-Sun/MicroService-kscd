package com.sun.mongo;

import cn.hutool.core.io.resource.ResourceUtil;
import cn.hutool.core.lang.Console;
import cn.hutool.core.util.CharsetUtil;
import cn.hutool.crypto.symmetric.SymmetricAlgorithm;
import cn.hutool.crypto.symmetric.SymmetricCrypto;
import cn.hutool.json.JSONUtil;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.nio.charset.StandardCharsets;


@RunWith(SpringRunner.class)
@SpringBootTest
public class AESTest {

    @Test
    public void 加密() {
        String data = "{\"registerInfo\":{\"surveyType\":\"string\",\"dutyIsClear\":0,\"registerAmount\":0,\"surveyName\":\"string\",\"registerTime\":\"string\",\"deathNumber\":0,\"deathOrnot\":0,\"caseDescription\":\"string\",\"injuredNumber\":0,\"accidentType\":0,\"caseMark\":\"string\",\"surveyPhone\":\"string\"},\"claimLossInfo\":{\"lossAmount\":0,\"lossType\":0,\"personLossList\":[{\"sumMedicalFee\":0,\"personFeeList\":[{\"lossAmount\":0,\"lossName\":\"string\"}],\"auditorPhone\":\"string\",\"sumCareFee\":0,\"injuredLevel\":\"string\",\"injuredDesc\":\"string\",\"defLossTime\":\"string\",\"identityNo\":\"string\",\"injuredIdentifyName\":\"string\",\"personPhone\":\"string\",\"auditorID\":\"string\",\"identityType\":\"string\",\"sumClaimFee\":0,\"injuredPart\":\"string\",\"cureDays\":0,\"isHospital\":0,\"injuredType\":0,\"belongType\":0,\"sumDependentFee\":0,\"auditor\":\"string\",\"lossReduceAmount\":0,\"sumLossFee\":0,\"personName\":\"string\",\"medicalType\":0,\"sumDeathFee\":0,\"missWorkDays\":0,\"hospitalDays\":0,\"floatRate\":0,\"sumOtherFee\":0,\"taskId\":\"string\",\"rescueFee\":0}],\"portionLossAmount\":0,\"floatRate\":0,\"preLossAmount\":0,\"lossTime\":\"string\",\"caseNo\":\"string\",\"propLossList\":[{\"belongType\":0,\"auditorPhone\":\"string\",\"quantity\":0,\"auditor\":\"string\",\"lossReduceAmount\":0,\"sumLossFee\":0,\"propName\":\"string\",\"defLossTime\":\"string\",\"propFeeList\":[{\"remnant\":0,\"lossAmount\":0,\"quantity\":0,\"lossName\":\"string\",\"floatRate\":0,\"rescueFee\":0}],\"auditorID\":\"string\",\"sumClaimFee\":0,\"floatRate\":0,\"taskId\":\"string\",\"rescueFee\":0}]},\"prePayInfo\":[{\"prePayAmount\":0,\"prePayTime\":\"string\"}],\"caseStatus\":[{\"time\":\"string\",\"status\":\"string\"}],\"caseTimes\":\"string\",\"claimCaseInfo\":{\"area\":\"string\",\"occurCoord\":{\"coordType\":0,\"latitude\":0,\"longitude\":0},\"address\":\"string\",\"city\":\"string\",\"occurReasonCode\":\"string\",\"occurTime\":\"string\",\"reportIdNumber\":\"string\",\"occurDriverName\":\"string\",\"lossTarget\":\"string\",\"remark\":\"string\",\"reportPerson\":\"string\",\"contactTel\":\"string\",\"reportPhone\":\"string\",\"isPrimaryScene\":\"string\",\"lossType\":\"string\",\"occurReason\":\"string\",\"askForAmount\":0,\"province\":\"string\",\"contact\":\"string\",\"occurDetail\":\"string\",\"relationship\":0,\"reportNo\":\"string\",\"reportTime\":\"string\"},\"caseEndInfo\":{\"compensateTime\":\"string\",\"endCaseType\":0,\"payType\":\"string\",\"caseEndingTime\":\"string\",\"caseAmount\":0,\"payState\":\"string\",\"reportNo\":\"string\",\"portionCaseAmount\":0},\"policyNo\":\"string\",\"payInfo\":[{\"claimNo\":\"string\",\"serialNumber\":\"string\",\"payeeType\":\"string\",\"claimAmount\":0,\"receiveBank\":\"string\",\"receiveTime\":\"string\",\"payAmount\":0,\"receiveName\":\"string\",\"currency\":\"string\",\"receiveAccount\":\"string\",\"receiveBankDetail\":\"string\",\"reportNo\":\"string\",\"payDate\":\"string\"}],\"reportNo\":\"string\"}";
        // data = ResourceUtil.readUtf8Str("jm.txt");;
        String secretKey = "a6623419d9a6f8c6";
        SymmetricCrypto aes = new SymmetricCrypto(SymmetricAlgorithm.AES, secretKey.getBytes(StandardCharsets.UTF_8));
        String s = aes.encryptHex(data);
        Console.log(s);

        SymmetricCrypto aes1 = new SymmetricCrypto(SymmetricAlgorithm.AES, secretKey.getBytes(StandardCharsets.UTF_8));
        String s1 = aes1.decryptStr(s, CharsetUtil.CHARSET_UTF_8);
        Console.log(s1);
    }

    @Test
    public void 解密() {
//        String data = "04f8e3f6e66400f12d19aa25c922c36146fed889d3fc485c30e5be59eee9e2f5536fe22edb50017a915aab7cbde6bd39d2f075c48cf122e5c71c55e99687d220542aac9ff1cbbaffeaf04bee6b4e7f06375a2903db5febaea3a29f23bab73f04122b2c116446fc962c50209550a5f710b1aeffbddc0fa0c72ae87854e0194ede0bc2e41c289de74da55371c230c0c146456e78824b7b79458180351fe752ba74fcc134ac1163e6e4c8c6e1d48eb6b8198957d089dc0661f2af5a00c36b1d4529852e71f61694928b469ac29014d85c57d24bd4eb60fe57612db6e758e49273c17dcaf9ed8baa93feafdecbcaefe02f4bfe17baa47f1729066d31074a01a2fed627859115c5481df3d112a23b79d1a815bd7e869c96ad53ba66958d9d0d8a17fc161993d04571b92049b02574a52dac5377265ca9dfed3621d03cd1052bea2e1293c40a41b2fa184257b4633303e588ed6e2f544a53c77b7afe874c5add4fc10fb7d34694c41c601aeb1f3905391d8eb9f79c64c1f8175141d423de2714d591c6bcef6525e7096074e59072e854207214e4a20b827b2fc4f760a73c1f6633b7b96c023ee218f3560f0cfbba90293ad03b3fafdba8046242f801d18b06e59235108a64e58a38fdfb0221aa909e0cd3149092e24e73d4649e9caa067e15e99a78fed9c62035d9e0def955bb4f01a457e42ee7875b7d79d9d669a13c33adfa927b72e23b2139aa50cdc22689e1d10636e1453d18c9321dde5d7d5abe5a5efc8a73b1e9f26de281ac9f55b73279825a1d9fb7a9d95b58dfd5cf62a56867affb578f1c258c8d2615c7a9c0c42bab00cd74f42f6b06cc7db303c4a47a4f75d58fbb0851416cfb54d29b682b94ffaa6eb64b311732ac57d686ab2ead02ae8285a5a4b31be6954dc6c646e54798b9879a76f1dc9eb0cf7f62e0a237d87b1891646d82300bb3c72da11124f695139f09b04d1e5ab9b4f3ef8ffdee72bbc8ac83a6f5a9dde6e2a68b1910c56423237df4edd80298efe5b0cbdac2f6a2c1cfd12a942cf9efd806aba3574debabf0e5caa06acc2b1c344e6335ca1a9d84e90311f60041ce2d1c5377cede844edfc90c49891c1940a6ef2f8192554ec15c83859ed3a0d7a9f9374b404f5cfbb81ad4d7cc8b1d1c31fa848d46bae942895cf61b1b7824266c579fdde63ca6eb796388532dc290a95bb5c1daf40ba133bd14d2f236d9cc2e6492709b7aef16db5819495f88740a0fcd7e6163d99420af68a7f44c88950219ae9c6cce2040ee2d9890b67cd23de2699da27d96c4868e476ffecce729b444baf152422f2c2cc6e8525f2339ba467f3db11d8df138f62d0710d468ef47adec410333c5346e450af2cd1679fd6550d0530d5a2adec09a1eaacd0ad479ccf1b2a05a1d44dc3db1f0333a1a3cf9c45fa70fe3dbc86afebcc57eddbc004f19ba0dcdbfffd1ef20a32c0a3a28137bf9be6d9bc7a07767a5256c8612c421d46bee7dda0bc61ac6b668f26dd26bef171696dc6fc3ebc8ccbc40ee8487e3a4b2ea12aee0adfca84f25bd8855310c13203a21cf44990eb22d6e03fcc53264b02a4143e8ad790e594e6335ca1a9d84e90311f60041ce2d1c5377cede844edfc90c49891c1940a6ef6faab17f8a9113661590a23fbc3d02b06e7d349c8ede349ccb017f50dd5c035075436e0796ada8ac1f6f447126a6828ec0aab912dc16d2cc3766e9dcaacf7e889f2993b8a465e320a0d209410d0362feb58e10d1b71ef6d43c75b951a529f70c3d83291eb28bc5c2983612243925ed7e3aaa4909380121c93abb404f099bcc39f494177bef16fda5c72406d6e2e276235d169765d6a5a2fdff4a65a3999af146cd3d386aca66269abd99794d287df76f8e3efb82099ed4f94f1c7cb4b52751eda5d5776f9c11991991a52a130aab5e8714d975faf867e0c2e2884917e82a373f1e6a177e4d826c6595e7f34153cad4a00f06e1edd1f4d11e1166e0cd78ed1cc8dcba05d2252dd719e491845ea2e5a51f2d9252381babe46af92b6da57febe6db4b75a1b4df3b56c251fe0ddb1ce532e4961e7f42af4e66fbd452bb3d26949d35b07be3a20e6b6527aa20bf78c4b8738423ddc68438ab8d9d550685b2a2d8f324a36b05766f60bd9209042a75ee7ee52b0f66f969050ad5e032cb67ebd058dc15a5d2c29790871f79b30eacf02fb47e1a01d08bbc8fd8289d05dc2584f451fc9e83a09fcb0f34dbf70190731e367e19ba085baab9d8f929eb54788f7149b1f70df9afff7977792985fe7406e35c91b3fc14a0297baea9dce70a0849d756853243765cc8ee4a82cc7423d80412fc5a47d3703aed35bb2f116536e813421ef9cf3bd3fd4963cd18fcfa8b6678c2b761bf9764c056a4e840ffdf29c87b7fef142192b71c4c155f4927033a50cfb4c9c518b83cf9aade835d926d773cc2659a93cefc7bb0d071ddac0a85cde6fa6a0467b93deff6d870d069aef74874554b4b6e1e192bfaf1cdfd5698ed3b3166114e1f0e2d905502184d48f07672a98aa8df9f8d29b301388a7dd0cec46b49fc682fe41f1748bff509aac1c26a8032c90824cbd06fa427a30bb2a10c1b4f47fe7c6f8ed99ad5ae061e546efa512a687b7bfe4c1eaea9e9c4f9fbcf0fd84a6af25284beeb855a60a1a4bf56f6921ac5a6b9c28b69ab26da344249613eb2853cd534dd30a295703aed35bb2f116536e813421ef9cf3b24cdb18f45228d4af6afa0a201dbdc45252f713dbc8d884dd1acbfb67e8174f39a23e54c6893199d1a06557bbf3c5125a7706c88f4ed607fab20f2ae9bbbf8e4604825d756cb9e74437aab5b7b850edaed7c67650f2e65a6318e798c0b78925b4c6df93f81053fee45550b97c04a30eed64dd58d9dbc228daa13e361354cdd6916b6f7da3c69145c098cd487b292b76c6634cf041030f4a8e30ffbacc0214fae82f978532cb41d34a9e58e4f2f3d44336afebcc57eddbc004f19ba0dcdbfffd1b6a47578858b041467aee0693ede3e59dbe8d3f8ee75f7b26d8f03318c96f2870db0cccf744735a6705b37b780da9da598bb5ad27946a5fff4a50e2c50b69ae106c4b642ece8b7accc1a1a01cd01bdd514de15ca1c4c4f11feccd883b0034f2cbfcf75d7f8573eabdf9a18e039d4832af42fce43022ec9336595c43b37a426f8c03d47339b984234559ca576a62efa0fee5c432838590a60b02ac1598516b6e24925ad95ffaec6e4443c065fc86eea32534121088916715fdc6f23285c8b0d9d5376aa9b31259bfe3fa16b3978eabedef1760b1dc1382dffe8698c76f18794038503bea1828dcd8a5ac3ddcedbc5333b95207af7c471af78c6b3c5e07f26852c1921bd4cc1eb4a2a4387b2dbf8b5bb7106402d6cd2c302a10d2201dcb7c6bb77dc8b01a61476d64e0006670ff610ec0acbb4c9b41b25322acaa1c49ac2f2efef2f08dd3b3b52f2fe01bfb3a0dd62310bd0d6efea0378844ab94b2ad0f8920a8131652a110cfa8027132712e2b577d9286b497ab2001cb83cf254432f06f29d860bbe9a41092562a7e9f0fb02ab1d289521e6eccb4282c2df038361107fff3ee4419cab4396792756d0d691de301d1cee27923a47ab826bdd327022ba51f47c51c7d393852b4594fb6d6f51c8307e7ea5565b105e0ff531e8da9b122e6c9e7af1";
        String data = ResourceUtil.readUtf8Str("jm.txt");
        String secretKey = "a6834ed6cae5ad23";
        SymmetricCrypto aes = new SymmetricCrypto(SymmetricAlgorithm.AES, secretKey.getBytes(StandardCharsets.UTF_8));
        String s = aes.decryptStr(data, CharsetUtil.CHARSET_UTF_8);
        Console.log(s);
    }

}
